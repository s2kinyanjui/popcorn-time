name: PopcornTime CI/CD Workflow

permissions:
  contents: read
  pull-requests: write
  issues: write

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]

env:
  NODE_VERSION: "20"
  TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  NEXTAUTH_SECRET: ${{ secrets.AUTH_SECRET }}
  NEXTAUTH_URL: https://popcorn-time-sil.vercel.app

jobs:
  # Job 1: Linting & Service + Component Tests
  lint-and-test:
    name: "Lint & Test"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run service and component tests
        run: npm run test

  # Job 2: Build Check
  build-check:
    name: "Build Check"
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next
          retention-days: 1

  # Job 3: Deploy Production (main branch only)
  deploy-production:
    name: "Deploy to Production"
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel env
        run: vercel pull --yes --environment=production --token=${{ env.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ env.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID }}

      - name: Build Vercel project
        run: vercel build --prod --token=${{ env.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ env.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "âœ… Production deployment: $url"

  # Job 4: Deploy Preview (dev branch + PRs)
  deploy-preview:
    name: "Deploy Preview"
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-check]
    if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/dev' && github.event_name == 'push')
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel env
        run: vercel pull --yes --environment=preview --token=${{ env.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ env.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID }}

      - name: Build Vercel project
        run: vercel build --token=${{ env.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ env.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "âœ… Preview deployment: $url"

      - name: Comment on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Preview deployment ready at: ${{ steps.deploy.outputs.url }}`
            })
